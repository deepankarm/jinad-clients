"""
    JinaD (Daemon)

    REST interface for managing distributed Jina  # noqa: E501

    The version of the OpenAPI document: 0.9.32
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)


class PodModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'name': (str,),  # noqa: E501
            'log_config': (str,),  # noqa: E501
            'hide_exc_info': (bool,),  # noqa: E501
            'port_ctrl': (int,),  # noqa: E501
            'ctrl_with_ipc': (bool,),  # noqa: E501
            'timeout_ctrl': (int,),  # noqa: E501
            'ssh_server': (str,),  # noqa: E501
            'ssh_keyfile': (str,),  # noqa: E501
            'ssh_password': (str,),  # noqa: E501
            'uses': (str,),  # noqa: E501
            'py_modules': ([str],),  # noqa: E501
            'port_in': (int,),  # noqa: E501
            'port_out': (int,),  # noqa: E501
            'host_in': (str,),  # noqa: E501
            'host_out': (str,),  # noqa: E501
            'socket_in': (str,),  # noqa: E501
            'socket_out': (str,),  # noqa: E501
            'dump_interval': (int,),  # noqa: E501
            'read_only': (bool,),  # noqa: E501
            'memory_hwm': (int,),  # noqa: E501
            'on_error_strategy': (str,),  # noqa: E501
            'num_part': (int,),  # noqa: E501
            'uses_internal': (str,),  # noqa: E501
            'entrypoint': (str,),  # noqa: E501
            'pull_latest': (bool,),  # noqa: E501
            'volumes': ([str],),  # noqa: E501
            'host': (str,),  # noqa: E501
            'port_expose': (int,),  # noqa: E501
            'silent_remote_logs': (bool,),  # noqa: E501
            'upload_files': ([str],),  # noqa: E501
            'workspace_id': (str,),  # noqa: E501
            'daemon': (bool,),  # noqa: E501
            'runtime_backend': (str,),  # noqa: E501
            'runtime_cls': (str,),  # noqa: E501
            'timeout_ready': (int,),  # noqa: E501
            'expose_public': (bool,),  # noqa: E501
            'pea_id': (int,),  # noqa: E501
            'pea_role': (str,),  # noqa: E501
            'uses_before': (str,),  # noqa: E501
            'uses_after': (str,),  # noqa: E501
            'parallel': (int,),  # noqa: E501
            'polling': (str,),  # noqa: E501
            'scheduling': (str,),  # noqa: E501
            'pod_role': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'name': 'name',  # noqa: E501
        'log_config': 'log_config',  # noqa: E501
        'hide_exc_info': 'hide_exc_info',  # noqa: E501
        'port_ctrl': 'port_ctrl',  # noqa: E501
        'ctrl_with_ipc': 'ctrl_with_ipc',  # noqa: E501
        'timeout_ctrl': 'timeout_ctrl',  # noqa: E501
        'ssh_server': 'ssh_server',  # noqa: E501
        'ssh_keyfile': 'ssh_keyfile',  # noqa: E501
        'ssh_password': 'ssh_password',  # noqa: E501
        'uses': 'uses',  # noqa: E501
        'py_modules': 'py_modules',  # noqa: E501
        'port_in': 'port_in',  # noqa: E501
        'port_out': 'port_out',  # noqa: E501
        'host_in': 'host_in',  # noqa: E501
        'host_out': 'host_out',  # noqa: E501
        'socket_in': 'socket_in',  # noqa: E501
        'socket_out': 'socket_out',  # noqa: E501
        'dump_interval': 'dump_interval',  # noqa: E501
        'read_only': 'read_only',  # noqa: E501
        'memory_hwm': 'memory_hwm',  # noqa: E501
        'on_error_strategy': 'on_error_strategy',  # noqa: E501
        'num_part': 'num_part',  # noqa: E501
        'uses_internal': 'uses_internal',  # noqa: E501
        'entrypoint': 'entrypoint',  # noqa: E501
        'pull_latest': 'pull_latest',  # noqa: E501
        'volumes': 'volumes',  # noqa: E501
        'host': 'host',  # noqa: E501
        'port_expose': 'port_expose',  # noqa: E501
        'silent_remote_logs': 'silent_remote_logs',  # noqa: E501
        'upload_files': 'upload_files',  # noqa: E501
        'workspace_id': 'workspace_id',  # noqa: E501
        'daemon': 'daemon',  # noqa: E501
        'runtime_backend': 'runtime_backend',  # noqa: E501
        'runtime_cls': 'runtime_cls',  # noqa: E501
        'timeout_ready': 'timeout_ready',  # noqa: E501
        'expose_public': 'expose_public',  # noqa: E501
        'pea_id': 'pea_id',  # noqa: E501
        'pea_role': 'pea_role',  # noqa: E501
        'uses_before': 'uses_before',  # noqa: E501
        'uses_after': 'uses_after',  # noqa: E501
        'parallel': 'parallel',  # noqa: E501
        'polling': 'polling',  # noqa: E501
        'scheduling': 'scheduling',  # noqa: E501
        'pod_role': 'pod_role',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PodModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            name (str):  The name of this object.  This will be used in the following places: - how you refer to this object in Python/YAML/CLI - log message - ...  When not given, then the default naming strategy will apply.                     . [optional]  # noqa: E501
            log_config (str): The YAML config of the logger used in this object.. [optional] if omitted the server will use the default value of "/home/deepankar/coding/repos/jina/jina/resources/logging.default.yml"  # noqa: E501
            hide_exc_info (bool): If set, then exception stack information to be added to the logging message, useful in debugging. [optional] if omitted the server will use the default value of False  # noqa: E501
            port_ctrl (int): The port for controlling the runtime, default a random port between [49152, 65535]. [optional]  # noqa: E501
            ctrl_with_ipc (bool): If set, use ipc protocol for control socket. [optional] if omitted the server will use the default value of False  # noqa: E501
            timeout_ctrl (int): The timeout in milliseconds of the control request, -1 for waiting forever. [optional] if omitted the server will use the default value of 5000  # noqa: E501
            ssh_server (str): The SSH server through which the tunnel will be created, can actually be a fully specified `user@server:port` ssh url.. [optional]  # noqa: E501
            ssh_keyfile (str): This specifies a key to be used in ssh login, default None. regular default ssh keys will be used without specifying this argument.. [optional]  # noqa: E501
            ssh_password (str): The ssh password to the ssh server.. [optional]  # noqa: E501
            uses (str):  The config of the executor, it could be one of the followings:  - an Executor-level YAML file path (*.yml/yaml)  - a name of a class inherited from `jina.Executor` - a docker image (must start with `docker://`) - builtin executors, e.g. `_pass`, `_logforward`, `_merge`  - the string literal of a YAML config (must start with `!`) - the string literal of a JSON config - the string literal of a YAML driver config (must start with `- !!`)  When use it under Python, one can use the following values additionally: - a Python dict that represents the config - a text file stream has `.read()` interface . [optional] if omitted the server will use the default value of "_pass"  # noqa: E501
            py_modules ([str]):  The customized python modules need to be imported before loading the executor  Note, when importing multiple files and there is a dependency between them, then one has to write the dependencies in  reverse order. That is, if `__init__.py` depends on `A.py`, which again depends on `B.py`, then you need to write:   --py-modules __init__.py --py-modules B.py --py-modules A.py  . [optional]  # noqa: E501
            port_in (int): The port for input data, default a random port between [49152, 65535]. [optional]  # noqa: E501
            port_out (int): The port for output data, default a random port between [49152, 65535]. [optional]  # noqa: E501
            host_in (str): The host address for input, by default it is 0.0.0.0. [optional] if omitted the server will use the default value of "0.0.0.0"  # noqa: E501
            host_out (str): The host address for output, by default it is 0.0.0.0. [optional] if omitted the server will use the default value of "0.0.0.0"  # noqa: E501
            socket_in (str): The socket type for input port. [optional] if omitted the server will use the default value of "PULL_BIND"  # noqa: E501
            socket_out (str): The socket type for output port. [optional] if omitted the server will use the default value of "PUSH_BIND"  # noqa: E501
            dump_interval (int): Serialize the model in the pod every n seconds if model changes. -1 means --read-only. . [optional] if omitted the server will use the default value of 240  # noqa: E501
            read_only (bool): If set, do not allow the pod to modify the model, dump_interval will be ignored. [optional] if omitted the server will use the default value of False  # noqa: E501
            memory_hwm (int): The memory high watermark of this pod in Gigabytes, pod will restart when this is reached. -1 means no restriction. [optional] if omitted the server will use the default value of -1  # noqa: E501
            on_error_strategy (str):  The skip strategy on exceptions.  - IGNORE: Ignore it, keep running all Drivers & Executors logics in the sequel flow - SKIP_EXECUTOR: Skip all Executors in the sequel, but drivers are still called - SKIP_HANDLE: Skip all Drivers & Executors in the sequel, only `pre_hook` and `post_hook` are called - THROW_EARLY: Immediately throw the exception, the sequel flow will not be running at all                       Note, `IGNORE`, `SKIP_EXECUTOR` and `SKIP_HANDLE` do not guarantee the success execution in the sequel flow. If something  is wrong in the upstream, it is hard to carry this exception and moving forward without any side-effect. . [optional] if omitted the server will use the default value of "IGNORE"  # noqa: E501
            num_part (int): the number of messages expected from upstream, 0 and 1 means single part. [optional] if omitted the server will use the default value of 0  # noqa: E501
            uses_internal (str):  The config runs inside the Docker container.   Syntax and function are the same as `--uses`. This is designed when `--uses=\"docker://...\"` this config is passed to  the Docker container. . [optional] if omitted the server will use the default value of "BaseExecutor"  # noqa: E501
            entrypoint (str): The entrypoint command overrides the ENTRYPOINT in Docker image. when not set then the Docker image ENTRYPOINT takes effective.. [optional]  # noqa: E501
            pull_latest (bool): Pull the latest image before running. [optional] if omitted the server will use the default value of False  # noqa: E501
            volumes ([str]):  The path on the host to be mounted inside the container.   Note,  - If separated by `:`, then the first part will be considered as the local host path and the second part is the path in the container system.  - If no split provided, then the basename of that directory will be mounted into container's root path, e.g. `--volumes=\"/user/test/my-workspace\"` will be mounted into `/my-workspace` inside the container.  - All volumes are mounted with read-write mode. . [optional]  # noqa: E501
            host (str): The host address of the runtime, by default it is 0.0.0.0.. [optional] if omitted the server will use the default value of "0.0.0.0"  # noqa: E501
            port_expose (int): The port of the host exposed to the public. [optional]  # noqa: E501
            silent_remote_logs (bool): Do not display the streaming of remote logs on local console. [optional] if omitted the server will use the default value of False  # noqa: E501
            upload_files ([str]):  The files on the host to be uploaded to the remote workspace. This can be useful when your Pod has more file dependencies beyond a single YAML file, e.g. Python files, data files.  Note, - currently only flatten structure is supported, which means if you upload `[./foo/a.py, ./foo/b.pp, ./bar/c.yml]`, then they will be put under the _same_ workspace on the remote, losing all hierarchies. - by default, `--uses` YAML file is always uploaded. - uploaded files are by default isolated across the runs. To ensure files are submitted to the same workspace across different runs, use `--workspace-id` to specify the workspace. . [optional]  # noqa: E501
            workspace_id (str): the UUID for identifying the workspace. When not given a random id will be assigned.Multiple Pea/Pod/Flow will work under the same workspace if they share the same `workspace-id`.. [optional]  # noqa: E501
            daemon (bool): The Pea attempts to terminate all of its Runtime child processes/threads on existing. setting it to true basically tell the Pea do not wait on the Runtime when closing. [optional] if omitted the server will use the default value of False  # noqa: E501
            runtime_backend (str): The parallel backend of the runtime inside the Pea. [optional] if omitted the server will use the default value of "PROCESS"  # noqa: E501
            runtime_cls (str): The runtime class to run inside the Pea. [optional] if omitted the server will use the default value of "ZEDRuntime"  # noqa: E501
            timeout_ready (int): The timeout in milliseconds of a Pea waits for the runtime to be ready, -1 for waiting forever. [optional] if omitted the server will use the default value of 60000  # noqa: E501
            expose_public (bool): If set, expose the public IP address to remote when necessary, by default it exposesprivate IP address, which only allows accessing under the same network/subnet. Important to set this to true when the Pea will receive input connections from remote Peas. [optional] if omitted the server will use the default value of False  # noqa: E501
            pea_id (int): defines the suffix for the workspace path of the pea`. [optional] if omitted the server will use the default value of 0  # noqa: E501
            pea_role (str): The role of this Pea in a Pod. [optional] if omitted the server will use the default value of "SINGLETON"  # noqa: E501
            uses_before (str): The executor attached after the Peas described by --uses, typically before sending to all parallels, accepted type follows `--uses`. [optional]  # noqa: E501
            uses_after (str): The executor attached after the Peas described by --uses, typically used for receiving from all parallels, accepted type follows `--uses`. [optional]  # noqa: E501
            parallel (int): The number of parallel peas in the pod running at the same time, `port_in` and `port_out` will be set to random, and routers will be added automatically when necessary. [optional] if omitted the server will use the default value of 1  # noqa: E501
            polling (str):  The polling strategy of the Pod (when `parallel>1`)  - ANY: only one (whoever is idle) Pea polls the message - ALL: all Peas poll the message (like a broadcast) . [optional] if omitted the server will use the default value of "ANY"  # noqa: E501
            scheduling (str): The strategy of scheduling workload among Peas. [optional] if omitted the server will use the default value of "LOAD_BALANCE"  # noqa: E501
            pod_role (str): The role of this pod in the flow. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
